#!/bin/sh
# postinst script for #PACKAGE#
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

create_database_user()
{
    if [ $# -ne 1 ]; then
        echo "create_database_user expects 1 argument, $# given"
        return
    fi

    su postgres -c "psql -tAc \"SELECT 1 FROM pg_roles WHERE rolname='$1'\" | grep -q 1 || createuser --no-createdb --no-createrole --no-superuser $1"
}


install_database()
{
    if [ $# -ne 2 ]; then
        echo "install_database expects 2 arguments, $# given"
        return
    fi

    su postgres -c "psql --list | cut -d ' ' -f 2 | grep -qx $1 || \
        (createdb -O cuz $1 && zcat /usr/share/ampy/$2 | psql -q -d $1)"
}

create_user_in_database()
{
    if [ $# -ne 2 ]; then
        echo "create_user_in_database expects 2 arguments, $# given"
        return
    fi

    su postgres -c "psql -q -c \
        \"INSERT INTO users (username, longname, password, roles) \
        VALUES ('$1', '$1', crypt('$2', gen_salt('bf')), '{viewdata}')\" \
        -d views || true"
}

make_admin()
{
    if [ $# -ne 1 ]; then
        echo "make_admin expects 1 arguments, $# given"
        return
    fi

    su postgres -c "psql -q -c \
        \"UPDATE users SET roles='{viewdata,viewconfig,editconfig,editusers}' \
        WHERE username='$1'\" -d views || true"
}


case "$1" in
    configure)
        if [ -z $2 ]; then
            # new install, no pre-existing package

            # create the databases and install the schemas if they don't exist
            create_database_user "ampweb"
            create_database_user "cuz"
            install_database "views" "views.sql.gz"
            install_database "ampmeta" "database.sql.gz"
            install_database "amp-asdb" "asdb-full.sql.gz"

            # Source debconf library
            . /usr/share/debconf/confmodule

            # create an initial admin user for the website
            db_get ampy/views_user
            user="$RET"
            db_get ampy/views_password
            password="$RET"
            su postgres -c "psql -q -c \
                \"CREATE EXTENSION pgcrypto;\" -d views || true"
            create_user_in_database "$user" "$password"
            make_admin "$user"

            # clear out everything, we don't care about it for future upgrades
            # and we don't want to keep the password stored in plain text
            # TODO better to only remove the password?
            db_purge
        else
            # TODO can any of this be moved into other files rather than
            # included directly in the postinst script
            # upgrading an existing install
            if dpkg --compare-versions "$2" le-nl "2.6-1"; then
                # remove constraint that is no longer needed
                su postgres -c "psql -q -c \"ALTER TABLE endpoint DROP CONSTRAINT valid_destination\" -d ampmeta || true"
                # remove table column that is no longer needed
                su postgres -c "psql -q -c \"ALTER TABLE schedule DROP COLUMN schedule_modified\" -d ampmeta || true"
                # add new column used to enable/disable tests
                su postgres -c "psql -q -c \"ALTER TABLE schedule ADD COLUMN schedule_enabled BOOLEAN NOT NULL DEFAULT true\" -d ampmeta || true"
                # add new column used to offset tests in a mesh
                su postgres -c "psql -q -c \"ALTER TABLE schedule ADD COLUMN schedule_mesh_offset integer NOT NULL DEFAULT 0\" -d ampmeta || true"
            fi

            if dpkg --compare-versions "$2" le-nl "2.7-1"; then
                # add the new unique constraint for endpoints
                su postgres -c "psql -q -c \
                \"CREATE UNIQUE INDEX unique_endpoints on endpoint (    \
                    endpoint_schedule_id,                               \
                    COALESCE(endpoint_source_mesh, '-1'),               \
                    COALESCE(endpoint_source_site, '-1'),               \
                    COALESCE(endpoint_destination_mesh, '-1'),          \
                    COALESCE(endpoint_destination_site, '-1')           \
                );\" -d ampmeta || true"

                # add the public flag to the mesh table
                su postgres -c "psql -q -c \"ALTER TABLE mesh ADD COLUMN mesh_public BOOLEAN DEFAULT false\" -d ampmeta || true"

                # update the views to add the new column. Unfortunately they
                # have to be replaced entirely rather than altered
                su postgres -c "psql -q -c \
                \"CREATE OR REPLACE VIEW active_mesh_members AS SELECT  \
                    member_meshname as meshname,                        \
                    member_ampname as ampname,                          \
                    mesh_is_src,                                        \
                    mesh_is_dst,                                        \
                    mesh_public as public                               \
                    FROM mesh, member, site                             \
                    WHERE mesh.mesh_name=member.member_meshname         \
                    AND member.member_ampname=site.site_ampname         \
                    AND mesh_active=true                                \
                    AND site_active=true;\" -d ampmeta || true"

                su postgres -c "psql -q -c \
                \"CREATE OR REPLACE VIEW full_mesh_details AS SELECT    \
                mesh_name as meshname,                                  \
                mesh_longname,                                          \
                mesh_description,                                       \
                mesh_is_src,                                            \
                mesh_is_dst,                                            \
                mesh_active,                                            \
                meshtests_test,                                         \
                mesh_public                                             \
                FROM mesh, meshtests                                    \
                WHERE mesh.mesh_name = meshtests.meshtests_name         \
                AND mesh_active = true;\" -d ampmeta || true"

                # update the permissions for the new ampweb user - amp-asdb
                su postgres -c "psql -q -c \
                    \"GRANT ALL ON ALL TABLES IN SCHEMA public TO       \
                    \\\"ampweb\\\";\" -d amp-asdb || true"
                su postgres -c "psql -q -c \
                    \"REVOKE ALL ON ALL TABLES IN SCHEMA public FROM    \
                    \\\"www-data\\\";\" -d amp-asdb || true"

                # update the permissions for the new ampweb user - ampmeta
                su postgres -c "psql -q -c \
                    \"GRANT ALL ON ALL TABLES IN SCHEMA public TO       \
                    \\\"ampweb\\\";\" -d ampmeta || true"
                su postgres -c "psql -q -c \
                    \"GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO    \
                    \\\"ampweb\\\";\" -d ampmeta || true"
                su postgres -c "psql -q -c \
                    \"REVOKE ALL ON ALL TABLES IN SCHEMA public FROM    \
                    \\\"www-data\\\";\" -d ampmeta || true"
                su postgres -c "psql -q -c \
                    \"REVOKE ALL ON ALL SEQUENCES IN SCHEMA public FROM \
                    \\\"www-data\\\";\" -d ampmeta || true"

                # update the permissions for the new ampweb user - views
                su postgres -c "psql -q -c \
                    \"GRANT ALL ON ALL TABLES IN SCHEMA public TO       \
                    \\\"ampweb\\\";\" -d views || true"
                su postgres -c "psql -q -c \
                    \"GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO    \
                    \\\"ampweb\\\";\" -d views || true"
                su postgres -c "psql -q -c \
                    \"REVOKE ALL ON ALL TABLES IN SCHEMA public FROM    \
                    \\\"www-data\\\";\" -d views || true"
                su postgres -c "psql -q -c \
                    \"REVOKE ALL ON ALL SEQUENCES IN SCHEMA public FROM \
                    \\\"www-data\\\";\" -d views || true"
            fi

            if dpkg --compare-versions "$2" le-nl "2.13-1"; then
                # add new users database table
                su postgres -c "psql -q -c \
                    \"CREATE TABLE IF NOT EXISTS users (                \
                        username TEXT PRIMARY KEY,                      \
                        longname TEXT NOT NULL,                         \
                        email TEXT,                                     \
                        roles TEXT[],                                   \
                        enabled BOOLEAN NOT NULL DEFAULT TRUE,          \
                        password TEXT);\" -d views || true"

                su postgres -c "psql -q -c \
                    \"GRANT ALL ON TABLE users TO \
                    \\\"ampweb\\\";\" -d views || true"

                # remove old userfilters, now part of the events database
                su postgres -c "psql -q -c \
                    \"DROP TABLE userfilters;\" -d views || true"

                # try to move old users in security.py into the database
                # XXX not very robust, but should work for all installed
                # instances that I'm aware of
                flag=0
                USERFILE=/usr/lib/python2.7/dist-packages/ampweb/security.py
                su postgres -c "psql -q -c \
                    \"CREATE EXTENSION pgcrypto;\" -d views || true"
                if [ -r $USERFILE ]; then
                    while read line; do
                        case "$line" in
                            \#*)    ;;
                            USERS*) flag=1;
                                    ;;
                            GROUP*) flag=2;
                                    ;;
                            def*)   flag=0
                                    ;;
                            *:*)    if [ $flag -eq 1 ]; then
                                        line=`echo $line | sed "s'[\',]''g"`
                                        user=`echo $line | cut -d ':' -f 1`
                                        pass=`echo $line | cut -d ':' -f 2`
                                        create_user_in_database $user $pass
                                    elif [ $flag -eq 2 ]; then
                                        line=`echo $line | sed "s'[\',]''g"`
                                        user=`echo $line | cut -d ':' -f 1`
                                        make_admin $user
                                    fi
                                    ;;
                            *)      ;;
                        esac
                    done < $USERFILE
                fi
            fi
        fi
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
